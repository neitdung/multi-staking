// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multistaking/v1/delegation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultiStakingLock struct {
	ConversionRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=conversion_ratio,json=conversionRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"conversion_ratio"`
	LockedAmount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=locked_amount,json=lockedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"locked_amount"`
	DelAddr         string                                 `protobuf:"bytes,3,opt,name=del_addr,json=delAddr,proto3" json:"del_addr,omitempty"`
	ValAddr         string                                 `protobuf:"bytes,4,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (m *MultiStakingLock) Reset()         { *m = MultiStakingLock{} }
func (m *MultiStakingLock) String() string { return proto.CompactTextString(m) }
func (*MultiStakingLock) ProtoMessage()    {}
func (*MultiStakingLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9dade11e2944357, []int{0}
}
func (m *MultiStakingLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStakingLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStakingLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStakingLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStakingLock.Merge(m, src)
}
func (m *MultiStakingLock) XXX_Size() int {
	return m.Size()
}
func (m *MultiStakingLock) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStakingLock.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStakingLock proto.InternalMessageInfo

type ValidatorAllowedToken struct {
	ValAddr    string `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	TokenDenom string `protobuf:"bytes,2,opt,name=token_denom,json=tokenDenom,proto3" json:"token_denom,omitempty"`
}

func (m *ValidatorAllowedToken) Reset()         { *m = ValidatorAllowedToken{} }
func (m *ValidatorAllowedToken) String() string { return proto.CompactTextString(m) }
func (*ValidatorAllowedToken) ProtoMessage()    {}
func (*ValidatorAllowedToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9dade11e2944357, []int{1}
}
func (m *ValidatorAllowedToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorAllowedToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorAllowedToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorAllowedToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorAllowedToken.Merge(m, src)
}
func (m *ValidatorAllowedToken) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorAllowedToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorAllowedToken.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorAllowedToken proto.InternalMessageInfo

func (m *ValidatorAllowedToken) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *ValidatorAllowedToken) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

type MultiStakingUnlock struct {
	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string        `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Entries          []UnlockEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries"`
}

func (m *MultiStakingUnlock) Reset()      { *m = MultiStakingUnlock{} }
func (*MultiStakingUnlock) ProtoMessage() {}
func (*MultiStakingUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9dade11e2944357, []int{2}
}
func (m *MultiStakingUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStakingUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStakingUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStakingUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStakingUnlock.Merge(m, src)
}
func (m *MultiStakingUnlock) XXX_Size() int {
	return m.Size()
}
func (m *MultiStakingUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStakingUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStakingUnlock proto.InternalMessageInfo

type UnlockEntry struct {
	// creation_height is the height which the unbonding took place.
	CreationHeight  int64                                  `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	ConversionRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=conversion_ratio,json=conversionRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"conversion_ratio"`
	Balance         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *UnlockEntry) Reset()      { *m = UnlockEntry{} }
func (*UnlockEntry) ProtoMessage() {}
func (*UnlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9dade11e2944357, []int{3}
}
func (m *UnlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockEntry.Merge(m, src)
}
func (m *UnlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockEntry proto.InternalMessageInfo

func (m *UnlockEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

type UnbonedMultiStakingRecord struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// validator_address is the bech32-encoded address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// creation_height is the height which the unbonding took place.
	CreationHeight int64 `protobuf:"varint,3,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// completion_time is the unix time for unbonding completion.
	CompletionTime  time.Time                              `protobuf:"bytes,4,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	ConversionRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=conversion_ratio,json=conversionRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"conversion_ratio"`
	InitialBalance  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=initial_balance,json=initialBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_balance"`
	Balance         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *UnbonedMultiStakingRecord) Reset()      { *m = UnbonedMultiStakingRecord{} }
func (*UnbonedMultiStakingRecord) ProtoMessage() {}
func (*UnbonedMultiStakingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9dade11e2944357, []int{4}
}
func (m *UnbonedMultiStakingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbonedMultiStakingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbonedMultiStakingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbonedMultiStakingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbonedMultiStakingRecord.Merge(m, src)
}
func (m *UnbonedMultiStakingRecord) XXX_Size() int {
	return m.Size()
}
func (m *UnbonedMultiStakingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbonedMultiStakingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UnbonedMultiStakingRecord proto.InternalMessageInfo

func (m *UnbonedMultiStakingRecord) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *UnbonedMultiStakingRecord) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *UnbonedMultiStakingRecord) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnbonedMultiStakingRecord) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*MultiStakingLock)(nil), "multistaking.v1.MultiStakingLock")
	proto.RegisterType((*ValidatorAllowedToken)(nil), "multistaking.v1.ValidatorAllowedToken")
	proto.RegisterType((*MultiStakingUnlock)(nil), "multistaking.v1.MultiStakingUnlock")
	proto.RegisterType((*UnlockEntry)(nil), "multistaking.v1.UnlockEntry")
	proto.RegisterType((*UnbonedMultiStakingRecord)(nil), "multistaking.v1.UnbonedMultiStakingRecord")
}

func init() { proto.RegisterFile("multistaking/v1/delegation.proto", fileDescriptor_e9dade11e2944357) }

var fileDescriptor_e9dade11e2944357 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x31, 0x4f, 0xdb, 0x4e,
	0x14, 0x8f, 0x13, 0xfe, 0x24, 0xff, 0x0b, 0x25, 0xd4, 0xa2, 0x52, 0x88, 0xaa, 0x04, 0x65, 0x68,
	0x59, 0x62, 0x2b, 0x74, 0x2a, 0x62, 0x49, 0x04, 0x52, 0x91, 0xca, 0xe2, 0x00, 0x43, 0x97, 0xe8,
	0xec, 0x7b, 0x75, 0x4e, 0xb1, 0xef, 0x22, 0xfb, 0xe2, 0x96, 0xb1, 0x5b, 0x47, 0xc6, 0x4e, 0x15,
	0x1f, 0x82, 0x0f, 0xc1, 0x88, 0xe8, 0x52, 0x75, 0xa0, 0x15, 0x2c, 0x9d, 0xfa, 0x19, 0xaa, 0xbb,
	0xb3, 0xc1, 0xa0, 0x48, 0x55, 0xd5, 0x22, 0x75, 0x4a, 0xee, 0xfd, 0xde, 0xfb, 0xbd, 0x77, 0xef,
	0xf7, 0xee, 0x19, 0xad, 0x86, 0xd3, 0x40, 0xd0, 0x58, 0xe0, 0x31, 0x65, 0xbe, 0x9d, 0x74, 0x6d,
	0x02, 0x01, 0xf8, 0x58, 0x50, 0xce, 0xac, 0x49, 0xc4, 0x05, 0x37, 0x6b, 0x79, 0x0f, 0x2b, 0xe9,
	0x36, 0x96, 0x7d, 0xee, 0x73, 0x85, 0xd9, 0xf2, 0x9f, 0x76, 0x6b, 0xac, 0x78, 0x3c, 0x0e, 0x79,
	0x3c, 0xd4, 0x80, 0x3e, 0xa4, 0x50, 0x53, 0x9f, 0x6c, 0x17, 0xc7, 0x60, 0x27, 0x5d, 0x17, 0x04,
	0xee, 0xda, 0x1e, 0xa7, 0x69, 0x86, 0x46, 0xcb, 0xe7, 0xdc, 0x0f, 0xc0, 0x56, 0x27, 0x77, 0xfa,
	0xda, 0x16, 0x34, 0x84, 0x58, 0xe0, 0x70, 0xa2, 0x1d, 0xda, 0x1f, 0x8b, 0x68, 0x69, 0x57, 0x56,
	0x31, 0xd0, 0x55, 0xbc, 0xe4, 0xde, 0xd8, 0xf4, 0xd1, 0x92, 0xc7, 0x59, 0x02, 0x51, 0x4c, 0x39,
	0x1b, 0x46, 0xb2, 0xe4, 0xba, 0xb1, 0x6a, 0xac, 0xfd, 0xdf, 0xdf, 0x3c, 0xbd, 0x68, 0x15, 0xbe,
	0x5c, 0xb4, 0x9e, 0xf8, 0x54, 0x8c, 0xa6, 0xae, 0xe5, 0xf1, 0x30, 0x2d, 0x28, 0xfd, 0xe9, 0xc4,
	0x64, 0x6c, 0x8b, 0xc3, 0x09, 0xc4, 0xd6, 0x16, 0x78, 0xe7, 0x27, 0x1d, 0x94, 0xd6, 0xbb, 0x05,
	0x9e, 0x53, 0xbb, 0x61, 0x75, 0x24, 0xa9, 0x89, 0xd1, 0x83, 0x80, 0x7b, 0x63, 0x20, 0x43, 0x1c,
	0xf2, 0x29, 0x13, 0xf5, 0xe2, 0x6f, 0x67, 0xd9, 0x61, 0x22, 0x97, 0x65, 0x87, 0x09, 0x67, 0x41,
	0x53, 0xf6, 0x14, 0xa3, 0xb9, 0x82, 0x2a, 0x04, 0x82, 0x21, 0x26, 0x24, 0xaa, 0x97, 0x24, 0xbb,
	0x53, 0x26, 0x10, 0xf4, 0x08, 0x89, 0x24, 0x94, 0xe0, 0x14, 0x9a, 0xd3, 0x50, 0x82, 0x15, 0xb4,
	0x51, 0x79, 0x7f, 0xdc, 0x2a, 0x7c, 0x3f, 0x6e, 0x15, 0xda, 0x03, 0xf4, 0xe8, 0x00, 0x07, 0x94,
	0x60, 0xc1, 0xa3, 0x5e, 0x10, 0xf0, 0x37, 0x40, 0xf6, 0xf8, 0x18, 0xd8, 0xad, 0x68, 0xe3, 0x56,
	0xb4, 0xd9, 0x42, 0x55, 0x21, 0x7d, 0x86, 0x04, 0x18, 0x0f, 0xf5, 0xa5, 0x1c, 0xa4, 0x4c, 0x5b,
	0xd2, 0xd2, 0xfe, 0x61, 0x20, 0x33, 0xdf, 0xf5, 0x7d, 0x26, 0x6b, 0x36, 0xb7, 0xd1, 0xc3, 0x74,
	0x46, 0x78, 0xa4, 0x88, 0x21, 0x8e, 0xd3, 0xc6, 0xd7, 0xcf, 0x4f, 0x3a, 0xcb, 0xe9, 0x25, 0x7b,
	0x1a, 0x19, 0x88, 0x88, 0x32, 0xdf, 0x59, 0xba, 0x0e, 0x49, 0xed, 0x92, 0x26, 0xc9, 0x4a, 0xbe,
	0xa6, 0x29, 0xfe, 0x8a, 0xe6, 0x3a, 0x24, 0xa3, 0xd9, 0x44, 0x65, 0x60, 0x22, 0xa2, 0x10, 0xd7,
	0x4b, 0xab, 0xa5, 0xb5, 0xea, 0xfa, 0x63, 0xeb, 0xce, 0xbc, 0x5a, 0xba, 0xee, 0x6d, 0x26, 0xa2,
	0xc3, 0xfe, 0x9c, 0x14, 0xcd, 0xc9, 0x42, 0x36, 0x16, 0x64, 0x07, 0x3f, 0x64, 0x5d, 0x7c, 0x57,
	0x44, 0xd5, 0x9c, 0xb3, 0xf9, 0x14, 0xd5, 0xbc, 0x08, 0xd4, 0x5b, 0x18, 0x8e, 0x80, 0xfa, 0x23,
	0xa1, 0xee, 0x59, 0x72, 0x16, 0x33, 0xf3, 0x0b, 0x65, 0x9d, 0x39, 0x8a, 0xc5, 0xfb, 0x18, 0xc5,
	0x03, 0x54, 0x76, 0x71, 0x80, 0x99, 0x07, 0x7a, 0x4c, 0xfe, 0x70, 0x08, 0x33, 0xb2, 0x8d, 0x4a,
	0xda, 0x03, 0xa3, 0xfd, 0x69, 0x0e, 0xad, 0xec, 0x33, 0x97, 0x33, 0x20, 0x79, 0xed, 0x1d, 0xf0,
	0x78, 0x44, 0xfe, 0x31, 0xed, 0x67, 0xe8, 0x53, 0x9a, 0xa9, 0xcf, 0x2e, 0xaa, 0x79, 0x3c, 0x9c,
	0x04, 0xa0, 0x5c, 0xe5, 0x76, 0x51, 0x4f, 0xa9, 0xba, 0xde, 0xb0, 0xf4, 0xea, 0xb1, 0xb2, 0xd5,
	0x63, 0xed, 0x65, 0xab, 0xa7, 0x5f, 0x91, 0xad, 0x3d, 0xfa, 0xda, 0x32, 0x9c, 0xc5, 0x9b, 0x60,
	0x09, 0xcf, 0x94, 0xfb, 0xbf, 0xfb, 0x90, 0x1b, 0x50, 0x8d, 0x32, 0x2a, 0x28, 0x0e, 0x86, 0x99,
	0xec, 0xf3, 0x7f, 0x41, 0xf6, 0xc5, 0x94, 0xb4, 0xaf, 0x39, 0xf3, 0x53, 0x55, 0xbe, 0x97, 0xa9,
	0xea, 0x0f, 0x4e, 0x2f, 0x9b, 0xc6, 0xd9, 0x65, 0xd3, 0xf8, 0x76, 0xd9, 0x34, 0x8e, 0xae, 0x9a,
	0x85, 0xb3, 0xab, 0x66, 0xe1, 0xf3, 0x55, 0xb3, 0xf0, 0xea, 0x79, 0x2e, 0x45, 0x04, 0x38, 0xa0,
	0x5c, 0x80, 0x37, 0xb2, 0xd5, 0x1b, 0xee, 0x64, 0x9f, 0xa5, 0xb7, 0x77, 0xce, 0x2a, 0xb3, 0x3b,
	0xaf, 0x44, 0x7b, 0xf6, 0x33, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x64, 0x6f, 0xc9, 0xc3, 0x06, 0x00,
	0x00,
}

func (this *UnlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnlockEntry)
	if !ok {
		that2, ok := that.(UnlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.ConversionRatio.Equal(that1.ConversionRatio) {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	return true
}
func (this *UnbonedMultiStakingRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnbonedMultiStakingRecord)
	if !ok {
		that2, ok := that.(UnbonedMultiStakingRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DelegatorAddress != that1.DelegatorAddress {
		return false
	}
	if this.ValidatorAddress != that1.ValidatorAddress {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.CompletionTime.Equal(that1.CompletionTime) {
		return false
	}
	if !this.ConversionRatio.Equal(that1.ConversionRatio) {
		return false
	}
	if !this.InitialBalance.Equal(that1.InitialBalance) {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	return true
}
func (m *MultiStakingLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStakingLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStakingLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DelAddr) > 0 {
		i -= len(m.DelAddr)
		copy(dAtA[i:], m.DelAddr)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.DelAddr)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.LockedAmount.Size()
		i -= size
		if _, err := m.LockedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ConversionRatio.Size()
		i -= size
		if _, err := m.ConversionRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValidatorAllowedToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorAllowedToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorAllowedToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiStakingUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStakingUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStakingUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ConversionRatio.Size()
		i -= size
		if _, err := m.ConversionRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbonedMultiStakingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbonedMultiStakingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbonedMultiStakingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InitialBalance.Size()
		i -= size
		if _, err := m.InitialBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.ConversionRatio.Size()
		i -= size
		if _, err := m.ConversionRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDelegation(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.CreationHeight != 0 {
		i = encodeVarintDelegation(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegation(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiStakingLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConversionRatio.Size()
	n += 1 + l + sovDelegation(uint64(l))
	l = m.LockedAmount.Size()
	n += 1 + l + sovDelegation(uint64(l))
	l = len(m.DelAddr)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *ValidatorAllowedToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	return n
}

func (m *MultiStakingUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDelegation(uint64(l))
		}
	}
	return n
}

func (m *UnlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovDelegation(uint64(m.CreationHeight))
	}
	l = m.ConversionRatio.Size()
	n += 1 + l + sovDelegation(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovDelegation(uint64(l))
	return n
}

func (m *UnbonedMultiStakingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegation(uint64(l))
	}
	if m.CreationHeight != 0 {
		n += 1 + sovDelegation(uint64(m.CreationHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovDelegation(uint64(l))
	l = m.ConversionRatio.Size()
	n += 1 + l + sovDelegation(uint64(l))
	l = m.InitialBalance.Size()
	n += 1 + l + sovDelegation(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovDelegation(uint64(l))
	return n
}

func sovDelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegation(x uint64) (n int) {
	return sovDelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiStakingLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStakingLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStakingLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorAllowedToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorAllowedToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorAllowedToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStakingUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStakingUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStakingUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, UnlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbonedMultiStakingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbonedMultiStakingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbonedMultiStakingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegation = fmt.Errorf("proto: unexpected end of group")
)
